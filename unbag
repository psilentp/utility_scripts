#! /usr/bin/python

import sys

# coding: utf-8

# Updating notebook for richer bagfiles

def unbag_fly(fly_num):
	resample_freq = 40 # a little bit faster than the Ca-cam will get wing aliasing

	fly_db_path = '/media/imager/FlyDataD/FlyDB'
	fly_path = fly_db_path + '/' + 'Fly%04d'%fly_num
	bagfile = None

	if not(type(bagfile) is str):
	    import os
	    file_list = [f for f in os.listdir(fly_path) if '.bag' in f]
	    if (type(bagfile) is int):
	        bagfile_name = file_list[bagfile]
	    else:
	        bagfile_name = file_list[0]
	else:
	    bagfile_name = bagfile
	bag_path = fly_path + '/' + bagfile_name

	import rosbag
	import numpy as np
	inbag = rosbag.Bag(bag_path)

	#get a list of topics in the bag file
	topics = inbag.get_type_and_topic_info()[1].keys()
	types = []
	for i in range(0,len(inbag.get_type_and_topic_info()[1].values())):
	    types.append(inbag.get_type_and_topic_info()[1].values()[i][0])

	#save the metadata
	metadata_msgs =  [(topic,msg,t) for topic,msg,t in inbag.read_messages(topics = '/exp_scripts/exp_metadata')]
	mtd = metadata_msgs[0][1]
	with open(os.path.join(fly_path,'git_SHA.txt'),'wt') as f:
	    f.write(mtd.git_SHA)
	sp = os.path.split(mtd.script_path)[-1]
	with open(os.path.join(fly_path,sp),'wt') as f:
	    f.write(mtd.script_code)
	with open(os.path.join(fly_path,'exp_description.txt'),'wt') as f:
	    f.write(mtd.exp_description)
	with open(os.path.join(fly_path,'fly_genotype.txt'),'wt') as f:
	    f.write(mtd.fly_genotype)
	with open(os.path.join(fly_path,'genotype_nickname.txt'),'wt') as f:
	    f.write(mtd.genotype_nickname)

	img_msgs = [(topic,msg,t) for topic,msg,t in inbag.read_messages(topics = ['/kine_camera_1/image_raw',
	                                                                        '/ca_camera_right/image_raw'])]
	condition_msgs = [(topic,msg,t) for topic,msg,t in inbag.read_messages(topics = ['/exp_scripts/exp_state'])]
	daq_msgs = [(topic,msg,t) for topic,msg,t in inbag.read_messages(topics = ['/phidgets_daq/all_data'])]
	kinefly_msgs = [(topic,msg,t) for topic,msg,t in inbag.read_messages(topics = ['/kinefly/flystate'])]

	kfly_tstamps = [km[1].header.stamp.to_time() for km in kinefly_msgs]
	left = [km[1].left.angles for km in kinefly_msgs]
	right = [km[1].right.angles for km in kinefly_msgs]
	f = lambda x: {0:(np.nan,),1:x}[len(x)]
	right = map(f,right)
	left = map(f,left)

	freq_idx = daq_msgs[0][1].channels.index('freq')
	x_idx = daq_msgs[0][1].channels.index('xpos')
	y_idx = daq_msgs[0][1].channels.index('ypos')

	daq_tstamps = [dm[2].to_time() for dm in daq_msgs]
	freq = [dm[1].values[freq_idx] for dm in daq_msgs]
	x_pos = [dm[1].values[x_idx] for dm in daq_msgs]
	y_pos = [dm[1].values[y_idx] for dm in daq_msgs]


	def fix_tstamps(tstamps):
	    """this function fixes the timestamps from the cameras 
	    since we know that they are coming in at a constant clock rate"""
	    from numpy import linalg
	    num_frames = len(tstamps)
	    a = np.vstack([np.arange(num_frames),np.ones(num_frames)]).T
	    b = np.array(tstamps)
	    slope,intercept = linalg.lstsq(a,b)[0]
	    fixed_tstamps = slope*a[:,0] + intercept
	    return fixed_tstamps

	from cv_bridge import CvBridge, CvBridgeError
	cv_bridge = CvBridge()

	kine_cam1_tstamps = list()
	kine_ros_tstamps = list()
	kine_cam1_imgs = list()

	ca_cam1_tstamps = list()
	ca_ros_tstamps = list()
	ca_cam1_imgs = list()

	for i in range(len(img_msgs)):
	    if img_msgs[i][0] == '/kine_camera_1/image_raw':
	        #the ros tstamp is when the msg was saved
	        kine_ros_tstamps.append(float(img_msgs[i][2].to_time()))
	        #the header tstamp is when the msg was generated
	        kine_cam1_tstamps.append(float(img_msgs[i][1].header.stamp.to_time()))
	        kine_cam1_imgs.append(cv_bridge.imgmsg_to_cv2(img_msgs[i][1]))
	    else:
	        ca_ros_tstamps.append(float(img_msgs[i][2].to_time()))
	        ca_cam1_tstamps.append(float(img_msgs[i][1].header.stamp.to_time()))
	        ca_cam1_imgs.append(cv_bridge.imgmsg_to_cv2(img_msgs[i][1]))
	ca_cam1_tstamps = fix_tstamps(ca_cam1_tstamps)
	kine_cam1_tstamps = fix_tstamps(kine_cam1_tstamps)

	#we should throw out the kine timestamps that occur before the first ca timestamp
	criterion =  np.argwhere(kine_cam1_tstamps < ca_cam1_tstamps[0])
	if len(criterion) > 0:
	    criterion = criterion[0]
	if len(criterion)>0:
	    first_kine_frame = criterion[-1]
	    kine_cam1_imgs = kine_cam1_imgs[first_kine_frame:]
	    kine_cam1_tstamps = kine_cam1_tstamps[first_kine_frame:]

	#make t=0 the time of the first kine_cam_frame
	first_ca_tstamp_ros = ca_cam1_tstamps[0]
	first_kine_tstamp_ros = kine_cam1_tstamps[0]
	kine_cam1_tstamps -= first_kine_tstamp_ros
	ca_cam1_tstamps -= first_kine_tstamp_ros
	kfly_tstamps -= first_kine_tstamp_ros
	daq_tstamps -= first_kine_tstamp_ros

	cond_tstamps = [cm[2].to_time() for cm in condition_msgs]
	cond_tstamps -= first_kine_tstamp_ros

	last_ca_tstamp_exp = ca_cam1_tstamps[-1]

	def choose_last(idx_array):
	    if np.shape(idx_array)[0]==0:
	        return 0
	    else:
	        return np.squeeze(idx_array[-1])
	    
	def get_data(t):
	    """ return the closest images to time t"""
	    ca_cam1_idx = choose_last(np.argwhere(ca_cam1_tstamps<t))
	    kine_cam1_idx = choose_last(np.argwhere(kine_cam1_tstamps<t))
	    kfly_idx = choose_last(np.argwhere(kfly_tstamps<t))
	    daq_idx = choose_last(np.argwhere(daq_tstamps<t))
	    cond_idx = choose_last(np.argwhere(cond_tstamps<t))
	    return {'ca_cam_right':ca_cam1_imgs[ca_cam1_idx],
	            'kine_cam_1':kine_cam1_imgs[kine_cam1_idx],
	            'left_amp':np.array(left[kfly_idx]),
	            'right_amp':np.array(right[kfly_idx]),
	            'wb_freq':np.array([freq[daq_idx],]),
	            'x_pos':np.array([x_pos[daq_idx],]),
	            'y_pos':np.array([y_pos[daq_idx],]),
	            'experimental_condition':np.array(condition_msgs[cond_idx][1].state,dtype = 'S256')}

	data_structure = get_data(0)

	#resample array
	end = np.floor(last_ca_tstamp_exp)

	num_new_samples = end*resample_freq
	resample_array = np.linspace(0,end,num_new_samples)

	unbag_dir = fly_path

	import h5py

	h5file_dict = dict()

	for key in data_structure.keys():
	    fpath = unbag_dir + '/' + key + '.hdf5'
	    if os.path.exists(fpath):
	        os.remove(fpath)
	    h5file_dict.update({key:h5py.File(unbag_dir + '/' + key + '.hdf5','a')})

	for key,value in h5file_dict.items():
	    dsetshape = list(data_structure[key].shape)
	    dsetshape = [int(num_new_samples)] + dsetshape
	    dsettype = data_structure[key].dtype
	    value.create_dataset(name = key,
	                         shape = dsetshape,
	                         dtype = dsettype)

	import time
	stime = time.time()
	for i,t in enumerate(resample_array):
	    datum = get_data(t)
	    for key,value in h5file_dict.items():
	        value[key][i] = datum[key]
	print time.time()-stime

	for value in h5file_dict.values():
	    value.close()

	tfile = h5py.File(unbag_dir + '/' + 'time' + '.hdf5','a')
	tfile.create_dataset('time',data = resample_array,compression = 'gzip')
	tfile.close()

	import datetime
	import yaml
	info_dict = yaml.load(inbag._get_yaml_info())
	dtm = datetime.datetime.fromtimestamp(info_dict['start'])
	m,d,y = metadata_msgs[0][1].fly_dob.split('.')
	dob_dt = datetime.datetime(year = int(y),month = int(m),day = int(d))
	delta_dt = dtm-dob_dt
	with open(os.path.join(fly_path,'age.txt'),'wt') as f:
	    f.write(str(delta_dt))

if __name__ == '__main__':
	flies = [int(x) for x in sys.argv[1:]]
	from multiprocessing import Pool
	p = Pool(5)
	print(p.map(unbag_fly,flies))